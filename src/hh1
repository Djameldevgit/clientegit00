Para entender el flujo completo de la carga de imágenes y el envío de un post al servidor, desde que el usuario selecciona las imágenes hasta que se envían al servidor, vamos a detallar el orden de ejecución de las funciones involucradas:

El usuario selecciona imágenes en el modal:

El usuario hace clic en el input de tipo file para seleccionar imágenes o videos.
Se llama a la función handleChangeImages.
Función handleChangeImages:

Esta función se ejecuta cuando el usuario selecciona imágenes/videos.
Lee los archivos seleccionados y los valida.
Crea un array newImages que contiene los archivos válidos.
Actualiza el estado local images con las nuevas imágenes seleccionadas.
Renderización de las imágenes seleccionadas:

El estado images se actualiza, lo que desencadena una re-renderización del componente.
Dentro del JSX del componente, el método map itera sobre el estado images y renderiza cada imagen o video utilizando las funciones imageShow y videoShow.
Función imageShow y videoShow:

Dependiendo del tipo de archivo (imagen o video), se llama a imageShow o videoShow para renderizar el archivo seleccionado en el modal.
Estas funciones devuelven JSX que muestra la imagen o video.
El usuario hace clic en el botón para enviar el post:

El usuario completa el contenido del post y hace clic en el botón "Post" para enviar el formulario.
Se llama a la función handleSubmit.
Función handleSubmit:

Esta función se encarga de manejar el envío del formulario.
Llama a la acción createPost pasando el contenido del post, las imágenes, y otros datos necesarios (como la autenticación).
Acción createPost:

En la acción createPost, primero se verifica si hay imágenes para subir.
Si hay imágenes, se llama a la función imageUpload para subirlas a Cloudinary.
Función imageUpload:

Esta función se encarga de subir las imágenes a Cloudinary.
Por cada imagen, se crea un objeto FormData y se añade la imagen junto con las credenciales de Cloudinary.
Se hace una petición POST a Cloudinary para subir cada imagen.
Se obtiene la URL de la imagen subida y se añade a un array imgArr.
Al finalizar, imageUpload devuelve imgArr, que contiene las URLs de las imágenes subidas.
Continuación de la acción createPost:

Una vez que se han subido las imágenes y se obtienen las URLs, se hace una petición POST a la API del servidor usando la función postDataAPI.
postDataAPI envía el contenido del post y las URLs de las imágenes al servidor.
El servidor recibe y almacena el post:

El servidor recibe la solicitud con el contenido del post y las URLs de las imágenes.
Procesa y almacena el post en la base de datos.
Devuelve una respuesta al cliente.
Actualizar el estado en Redux:

La acción createPost actualiza el estado en Redux con el nuevo post utilizando el tipo POST_TYPES.CREATE_POST.
Aquí tienes el flujo de ejecución en orden:

El usuario selecciona imágenes en el modal.
handleChangeImages se ejecuta y actualiza el estado images.
El componente se re-renderiza y muestra las imágenes utilizando imageShow y videoShow.
El usuario hace clic en el botón para enviar el post.
handleSubmit se ejecuta y llama a createPost.
createPost verifica si hay imágenes y llama a imageUpload.
imageUpload sube las imágenes a Cloudinary y devuelve las URLs.
createPost usa postDataAPI para enviar el post y las URLs al servidor.
El servidor recibe y almacena el post.
createPost actualiza el estado en Redux con el nuevo post.
Este es el flujo completo desde que el usuario selecciona imágenes hasta que se envía el post al servidor.